#nullable enable
NATS.NKeys.Base32
NATS.NKeys.KeyPair
NATS.NKeys.KeyPair.Dispose() -> void
NATS.NKeys.KeyPair.GetPublicKey() -> string!
NATS.NKeys.KeyPair.GetSeed() -> string!
NATS.NKeys.KeyPair.Sign(System.ReadOnlyMemory<byte> message, System.Memory<byte> signature) -> void
NATS.NKeys.KeyPair.Verify(System.ReadOnlyMemory<byte> message, System.ReadOnlyMemory<byte> signature) -> bool
NATS.NKeys.NKeysException
NATS.NKeys.NKeysException.NKeysException(string! message) -> void
NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.Account = 0 -> NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.Cluster = 16 -> NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.Curve = 184 -> NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.Operator = 112 -> NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.Server = 104 -> NATS.NKeys.PrefixByte
NATS.NKeys.PrefixByte.User = 160 -> NATS.NKeys.PrefixByte
static NATS.NKeys.Base32.FromBase32(System.ReadOnlySpan<char> encoded, System.Span<byte> result) -> int
static NATS.NKeys.Base32.GetDataLength(System.ReadOnlySpan<char> encoded) -> int
static NATS.NKeys.Base32.GetEncodedLength(System.ReadOnlySpan<byte> data) -> int
static NATS.NKeys.Base32.ToBase32(System.ReadOnlySpan<byte> data, System.Span<char> output) -> int
static NATS.NKeys.KeyPair.CreatePair(NATS.NKeys.PrefixByte prefix) -> NATS.NKeys.KeyPair!
static NATS.NKeys.KeyPair.CreatePair(NATS.NKeys.PrefixByte prefix, System.Security.Cryptography.RandomNumberGenerator! rng) -> NATS.NKeys.KeyPair!
static NATS.NKeys.KeyPair.FromPublicKey(System.ReadOnlySpan<char> publicKey) -> NATS.NKeys.KeyPair!
static NATS.NKeys.KeyPair.FromSeed(System.ReadOnlySpan<char> encodedSeed) -> NATS.NKeys.KeyPair!
